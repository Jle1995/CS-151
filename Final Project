**********
//Name: Jonathan Le
//Creation: 12/15/2017
//Description: The final project on connect four.
//Version: Final Project
**********


#include <iostream>

using namespace std;



//Name: ConnectVertical()
//Parameters: int Column[], char &Red, char &Blue
//Return: int
//Description: Function for vertical win
//flowchart: 
//label:                                                            Task                                                            Goto
//01                                          (Start: int Column[], char&Red, char &Blue )                                          02
//02                                                          [char Red = 'X']                                                      03
//03                                                         [char Blue = 'O']                                                      04
//04                                                            [Column[0];]                                                        05
//05                                                            [Column[1];]                                                        06
//06                                                            [Column[2];]                                                        07
//07                                                            [Column[3];]                                                        08
//08                                                            [Column[4];]                                                        09
//09                                                            [Column[5];]                                                        10
//10                                                            [Column[6];]                                                        11
//11                                                            [int n;]                                                            12
//12                                                            [n = 1;]                                                            13                                                  
//13                                                            <if (n == 1)>                                                       14
//14                              [for (Red = Column[6], n = 1; Red > Column[3]; Red = Column[6 - n]]                               15, 19
//15                                                            /"Red is "/                                                         16 
//16                                                               /Red/                                                            17
//17                                                              /endl;/                                                           18
//18                                                            (return true;)                                                      14, 19
//19                                                            <else if(n == 1)>                                                   20
//20                              [for (Red = Column[3], n = 1; Red > Column[6]; Red = Column[6 - n]]                               21, 25
//21                                                            /"Red is "/                                                         22
//22                                                              /Red/                                                             23
//23                                                              /endl;/                                                           24
//24                                                            (return true;)                                                      20, 25  
//25                                                         <else if (n == 1)>                                                     26
//26                              [for (Red = Column[0], n = 1; Red < Column[3]; Red = Column[0 + n]]                               27, 31
//27                                                            /"Red is "/                                                         28
//28                                                              /Red/                                                             29
//29                                                              /endl;/                                                           30
//30                                                            (return true;)                                                      26, 28
//31                                                         <else if (n == 1)>                                                     32                        
//32                              [for (Red = Column[3], n = 1; Red < Column[0]; Red = Column[3 - n]]                               33, 37
//33                                                            /"Red is "/                                                         34
//34                                                               /Red/                                                            35
//35                                                              /endl;/                                                           36
//36                                                            (return true;)                                                      32, 37
//37                                                         <else if (n == 1)>                                                     38
//38                              [for (Red = Column[2], n = 1; Red < Column[5]; Red = Column[2 + n]]                               39, 42 
//39                                                            /"Red is "/                                                         40
//40                                                              /Red/                                                             41
//41                                                              /endl;/                                                           42
//42                                                         <else if (n == 1)>                                                     43
//43                              [for (Red = Column[5], n = 1; Red < Column[2]; Red = Column[5 - n]]                               44, 48
//44                                                            /"Red is "/                                                         45
//45                                                              /endl/                                                            46  
//46                                                            (return true;)                                                      47, 43
//47                                                         <else if (n == 1)>                                                     48
//48                              [for (Red = Column[1], n = 1; Red < Column[4]; Red = Column[1 + n]]                               49, 54
//49                                                            /"Red is "/                                                         50
//50                                                              /Red/                                                             51
//51                                                             /endl;/                                                            52
//52                                                            (return true;)                                                      48, 53
//53                                                         <else if (n == 1)>                                                     54
//54                              [for (Red = Column[4]; n = 1; Red < Column[1]; Red = Column[4 - n]]                               55, 60                       
//55                                                            /"Red is "/                                                         56
//56                                                              /Red/                                                             57
//57                                                             /endl;/                                                            58
//58                                                            (return true;)                                                      54, 59
//59                                                              <else>                                                            60
//60                                                            /"X wins the game\n";/                                              61
//61                                                           <if (n == 1)>                                                        62
//62                              [for (Blue = Column[6]; n = 1; Blue > Column[3]; Blue = Column[6 - n])]                           63, 67
//63                                                            /"Blue is "/                                                        64
//64                                                              /Blue/                                                            65
//65                                                              /endl;/                                                           66
//66                                                            (return true;)                                                      62, 67
//67                                                           <else if (n == 1)>                                                   68
//68                              [for (Blue = Column[3]; n = 1; Blue < Column[6]; Blue = Column[3 + n])]                           69, 72
//69                                                            /"Blue is "/                                                        70
//70                                                              /Blue/                                                            71
//71                                                              /endl;/                                                           72
//72                                                            (return true;)                                                      68, 73 
//73                                                           <else if (n == 1)>                                                   74
//74                              [for (Blue = Column[0]; n = 1; Blue > Column[4]; Blue = Column[0 + n])]                           75, 78
//75                                                            /"Blue is "/                                                        76
//76                                                              /Blue/                                                            77
//77                                                              /endl;/                                                           78
//78                                                           (return true;)                                                       74, 79
//79                                                           <else if (n == 1)>                                                   80
//80                              [for (Blue = Column[4]; n = 1; Blue < Column[0]; Blue = Column[4 - n])]                           81, 83
//81                                                            /"Blue is "/                                                        82
//82                                                              /Blue/                                                            83
//83                                                              /endl;/                                                           84
//84                                                           (return true;)                                                       80, 84
//85                                                           <else if (n == 1)>                                                   86
//86                              [for (Blue = Column[1]; n = 1; Blue < Column[4]; Blue = Column[1 + n])]                           87, 88
//87                                                            /"Blue is "/                                                        88
//88                                                              /Blue/                                                            89
//89                                                              /endl;/                                                           90
//90                                                            (return true;)                                                      86, 91
//91                                                           <else if (n == 1)>                                                   92
//92                              [for (Blue = Column[4]; n = 1; Blue > Column[1]; Blue = Column[4 - n])]                           93, 93
//93                                                            /"Blue is "/                                                        94
//94                                                             /Blue/                                                             95
//95                                                             /endl;/                                                            96
//96                                                            (return true;)                                                      92, 97
//97                                                           <else if (n == 1)>                                                   98        
//98                              [for (Blue = Column[2]; n = 1; Blue < Column[5]; Blue = Column[2 + n])]                           99, 98
//99                                                            /"Blue is "/                                                        100
//100                                                             /Blue/                                                            101
//101                                                            /endl;/                                                            102
//102                                                           (return true;)                                                      98, 103
//103                                                          <else if (n == 1)>                                                   104
//104                             [for (Blue = Column[5]; n = 1; Blue < Column[2]; Blue = Column[5 - n])]                           105, 103
//105                                                            /"Blue is "/                                                       106
//106                                                            /Blue/                                                             107
//107                                                            /endl;/                                                            108
//108                                                           (return true;)                                                      104, 109
//109                                                           <else>                                                              110
//110                                                         /"O wins the game\n";/                                                111
//111                                                           (return 0;)                                                        

//Name : ConnectHorizontal()
//Parameters: int, char &Red, char &Blue;
//Return: int
//Description: Function for horizontal win
//flowchart:
//label:                                                            Task                                                            Goto
//01                                              (Start: int Row[], char&Red, char &Blue )                                         02
//02                                                           [char Red = 'X';]                                                    03
//03                                                          [char Blue = 'O';]                                                    04
//04                                                            [int n = 0;]                                                        05
//05                                                            [n = 1;]                                                            06
//06                                                      [int Row[] = { {"|_|"}, ]                                                 07
//07                                                           [{"|_|}, ]"                                                          08
//08                                                           [{"|_|"}, ]                                                          09
//09                                                           [{"|_|"}, ]                                                          10
//10                                                           [{"|_|"}, ]                                                          11
//11                                                           [{"|_|"}, };]                                                        12
//12                                                           [Row[0];]                                                            13                                                  
//13                                                           [Row[1];]                                                            14
//14                                                           [Row[2];]                                                            15
//15                                                           [Row[3];]                                                            16 
//16                                                           [Row[4];]                                                            17
//17                                                           [Row[5];]                                                            18
//18                                                         <else if (n == 1)>                                                     19
//19                               [for (Red = Row[5], n = 1; Red > Row[1]; Red = Row[5 - n])]                                      20, 24 
//20                                                          /"Red is "/                                                           21
//21                                                           /Red/                                                                22
//22                                                           /endl;/                                                              23
//23                                                          (return true;)                                                        19, 24
//24                                                         <else if (n == 1)>                                                     25
//25                               [for (Red = Row[1], n = 1; Red < Row[5]; Red = Row[1 + n])]                                      26, 30 
//26                                                         /"Red is "/                                                            27
//27                                                          /Red/                                                                 28
//28                                                          /endl;/                                                               29
//29                                                         (return true;)                                                         25, 30
//30                                                         <else if (n == 1)>                                                     31
//31                               [for (Red = Row[4], n = 1; Red > Row[0]; Red = Row[4 - n])]                                      32, 36
//32                                                          /"Red is "/                                                           33
//33                                                          /Red/                                                                 34
//34                                                          /endl;/                                                               35
//35                                                         (return true;)                                                         31, 36 
//36                                                         <else if (n == 1)>                                                     37
//37                               [for (Red = Row[0], n = 1; Red < Row[4]; Red = Row[0 + n])]                                      38, 42                        
//38                                                          /"Red is "/                                                           39
//39                                                          /Red/                                                                 40
//40                                                          /endl;/                                                               41
//41                                                        (return true;)                                                          37, 42
//42                                                        <else>                                                                  43
//43                                                  /"X wins the game\n";/                                                        44
//44                                                        (return 0;)                                                             45 
//45                                                  <if (n == 1)>                                                                 46 
//46                               [for (Blue = Row[5], n = 1; Blue < Row[1]; Red = Row[5 - n])]                                    47, 51
//47                                                         /"Blue is "/                                                           48
//48                                                         /Blue/                                                                 49
//49                                                        /endl;/                                                                 50,
//50                                                       (return true;)                                                           46, 51
//51                                                        <if (n == 1)>                                                           52
//52                               [for (Blue = Row[1], n = 1; Red > Row[5]; Red = Row[1 + n])]                                     53   
//53                                                        /"Blue is "/                                                            54
//54                                                        /Blue/                                                                  55
//55                                                        /endl;/                                                                 56
//56                                                      (return true;)                                                            52, 57
//57                                                        <if (n == 1)>                                                           58
//58                               [for (Blue = Row[0], n = 1; Red < Row[4]; Red = Row[0 + n])]                                     59
//59                                                        /"Blue is "/                                                            60
//60                                                        /Blue/                                                                  61
//61                                                        /endl;/                                                                 62
//62                                                      (return true;)                                                            58, 63
//63                                                        <if (n == 1)>                                                           64
//64                               [for (Blue = Row[4], n = 1; Red > Row[0]; Red = Row[4 - n])]                                     65
//65                                                        /"Blue is "/                                                            66
//66                                                        /Blue/                                                                  67
//67                                                        /endl;/                                                                 68
//68                                                      (return true;)                                                            64, 69
//69                                                        <else>                                                                  70
//70                                                      /"O is the winner";/                                                      71
//71                                                      (return 0;)                                                               

//Name: ConnectDiagonal()
//Parameters: int BoardSize[][], int, char &Red, char &Blue;
//Return: None
//Description: Function that is a diagonal win.
//Flowchart:
//Label

//Name: Board()
//Parameters: string BoardSize[][] , int Column[], int Row[], char &Red, char &Blue;
//Return: string;
//Description: The function that represents the board for connect four.
//flowchart:
//Label:

//Name: WinLoseDraw()
//Parameters: char &Red, char &Blue;
//Return: string
//Description: Function for the outcome of the game.
//flowchart:
//Label:

//Name: main()
//Parameters: None
//Return: None
//Description: The main function for connect four.
//flowchart:
//Label:


BoardSize[Row][Column];

string BoardSize[6][7] = {   {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                             {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                             {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                             {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                             {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                             {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"}  };

int ConnectVertical(int Column[], char &Red, char &Blue,)
{
   char Red = 'X';
   char Blue = 'O';
   
   int Column[] = {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"};
   
   Column[0]; Column[1]; Column[2]; Column[3];
   Column[4]; Column[5]; Column[6];
   
   int n;
   
   if (n == 1)
   {
       for (Red = Column[6], n = 1; Red > Column[3]; Red = Column[6 - n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Red = Column[3], n = 1; Red < Column[6]; Red = Column[3 + n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Red = Column[0], n = 1; Red < Column[3]; Red = Column[0 + n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Red = Column[3], n = 1; Red > Column[0]; Red = Column[1 - n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }   
   else if (n == 1)
   {
       for (Red = Column[2], n = 1; Red < Column[5]; Red = Column[2 + n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Red = Column[5], n = 1; Red > Column[2]; Red = Column[5 - n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
    else if (n == 1)
   {
       for (Red = Column[1], n = 1; Red > Column[4]; Red = Column[1 + n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Red = Column[4], n = 1; Red > Column[1]; Red = Column[4 - n])
       {
         cout << "Red is " << Red << endl;
       }
       return true;
   }
   
   else {
         cout << "X wins the game\n";
   }
   
   if (n == 1)
   {
       for (Blue = Column[6], n = 1; Blue > Column[3]; Blue = Column[6 - n])
       {
         cout << "Blue is " << Blue << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[3], n = 1; Blue < Column[6]; Blue = Column[3 + n])
       {
         cout << "Blue is " << Blue << endl;
       }
           return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[0], n = 1; Blue > Column[3]; Blue = Column[0 + n])
       {
         cout << "Blue is " << Blu << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[3], n = 1; Blue < Column[0]; Blue = Column[3 - n])
      {
        cout << "Blue is " << Blue << endl;
      }
       return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[1], n = 1; Blue < Column[4]; Blue = Column[1 + n])
       {
         cout << "Blue is " << Blue << endl;
       }
       return true;     
   }
   else if (n == 1)
   {
       for (Blue = Column[4], n = 1; Blue < Column[1]; Blue = Column[4 - n])
       {
         cout << "Blue is " << Blue << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[2], n =1; Blue < Column[5]; Blue = Column[3 + n])
       {
         cout << "Blue is " << Blue << endl;
       }
       return true;
   }
   else if (n == 1)
   {
       for (Blue = Column[5], n = 1; Blue > Column[2]; Blue = Column[5 - n])
   }
   else {
         cout << "O wins the game\n";
   }
       
   return 0;

}

int ConnectHorizontal(int Row[], char &Red, char &Blue)
{
  
  char Red = 'X';
  char Blue = 'O';
  
  int n;
  n = 1;
  
  int Row[] = {  {"|_|"},
                 {"|_|"},
                 {"|_|"},
                 {"|_|"},
                 {"|_|"},
                 {"|_|"}, };
  
  Row[0]; Row[1]; Row[2]; Row[3]; Row[4]; Row[5];
  
  if (n == 1)
  {
      for (Red = Row[5], n = 1; Red > Row[1]; Red = Row[5 - n])
          {
            cout << "Red is " << Red;
          }
      return true;
  }
  else if (n == 1)
  {
      for (Red = Row[1], n = 1; Red > Row[5]; Red = Row[2 + n])
          {
            cout << "Red is " << Red;
          }
      return true;
  }
  else if (n == 1)
  {
      for (Red = Row[4], n = 1; Red > Row[0]; Red = Row[4 - n])
          {
            cout << "Red is " << Red;
          }
      return true;
  }
  else if (n == 1)
  {
      for (Red = Row[0], n = 1; Red < Row[4]; Red = Row[0 + n])
          {
           cout << "Red is " << Red;  
          }
      return true;
  }
  else {
         cout << "X wins the game\n";
  }
  
  if (n == 1)
  {
      for (Blue = Row[5], n = 1; Blue > Row[1]; Blue = Row[5 - n])
          {
            cout << "Blue is " << Blue << endl;
          }
      return true;
  }
  else if (n == 1)
  {
  for (Blue = Row[1], n == 1; Blue < Row[5]; Blue = Row[1 + n])
      {
        cout << "Blue is " << Blue << endl;
      }
      return true;
  }
  else if (n == 1)
  {
      for (Blue = Row[0], n = 1; Blue < Row[4]; Blue = Row[0 + n])
          {
            cout << "Blue is " << Blue << endl;
          }
      return true;
  }
  else if (n == 1)
  {
      for (Blue = Row[4], n = 1; Blue > Row[0]; Blue = Row[4 - n])
          {
           cout << "Blue is " << Blue << endl; 
          } 
      return true;
  }
  else {
        cout << "O wins the game\n";
  }
  return 0;
}

bool ConnectDiagonal(int BoardSize[][], int Column[], int Row[], char &Red, char &Blue)
{
  
  char Red = 'X';
  char Blue = 'O';
  
  int Column[7];
  int Row[6];
  
  int BoardSize[Row][Column] =    {   {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                                      {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                                      {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                                      {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                                      {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                                      {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"}  };
{
  /*
  for (Red == BoardSize[0][6], n == 1; Row > BoardSize[0][5]; Red = BoardSize[0 + n][6 - n])
  */
  /*
  if (Red == BoardSize[0][3])
      do {
           cout << "It's O's turn.\n";
           BoardSize[1][2];
      } while (Red > BoardSize[0][0] && Red > BoardSize [0][1] && Red > BoardSize [0][2])
      
  else if (Red == BoardSize[1][2])
      do {
           cout << "It's O turn.\n."
           BoardSize[2][1];
      } while (Red > BoardSize[1][0] && Red > BoardSize [1][1])
  
  else if (Red == BoardSize[2][1])
      do {
            cout << "It's O's turn.\n";
            BoardSize[3][0];
      } while (Red > BoardSize[2][0])
      
  else if (Red == BoardSize[3][0])
      do {
           cout << "It's O turn.\n";
           Red++;
      } while (Red < BoardSize[3][6] && Red < BoardSize[3][5] && Red < BoardSize[3][4] && Red < BoardSIze[3][3] && Red < BoardSize[3][2] && Red < BoardSize[3][1])
      
  else { 
      cout << "X wins the game\n";
  }
}      

{
  if (Red == BoardSize[0][4])
      do {
           cout << "It's O turn.\n";
           BoardSize[1][3];
      } while (Red > BoardSize[0][3])
      
  else if (Red == BoardSize[1][3])
      do {
           cout << "It's O turn.\n";
           BoardSize[2][2];
      } while (Red > BoardSize[1][0] && Red > BoardSize[1][1] && Red > BoardSize[1][2])
      
  else if (Red == BoardSize[2][2])
      do {
           cout << "It's O turn.\n";
           BoardSize[3][1];
      } while (Red > BoardSize[2][0] && Red > BoardSize[2][1])
      
  else if (Red == BoardSize[3][1])
      do {
           cout << "It's O turn.\n";
           BoardSize[4][0];
      } while (Red > BoardSize[3][0])
      
  else if (Red == BoardSize[4][0])
      do {
           cout << "It's O turn.\n";
           Red++;
      } while (Red < BoardSize[4][6] && Red < BoardSize[4][5] && Red < BoardSize[4][4] && Red < BoardSize[4][3] && Red < BoardSize[4][2] && Red < BoardSize[4][1])
  
  else {
        cout << "X wins the game\n";
  }
} 

{
  if (Red == BoardSize[0][5])
      do {
           cout << "It's O turn.\n";
           BoardSize[1][4];
      } while (Red < BoardSize[0][6])
  
  else if (Red == BoardSize[1][4])
      do {
           cout << "It's O turn.\n";
           BoardSize[2][3];
      } while (Red < BoardSize[1][6] && Red < BoardSize[1][5])
      
  else if (Red == BoardSize[2][3])
      do {
           cout << "It's O turn.\n";
           BoardSize[3][2];
      } while (Red < BoardSize[2][6] && Red < BoardSize[2][5] && Red < BoardSize[2][4])
      
  else if (Red == BoardSize[3][2])
      do {
           cout << "It's O turn.\n";
           BoardSize[4][1];
      } while (Red < BoardSize[3][6] && Red < BoardSize[3][5] && Red < BoardSize[3][4] && Red < BoardSize[3][3])
      
  else if (Red == BoardSize[4][1])
      do {
           cout << "It's O turn.\n";
           BoardSize[5][0];
      } while (Red < BoardSize[5][6] && Red < BoardSize[5][5] && Red < BoardSize[5][4] && Red < BoardSize[5][3] && Red < Boardize[5][2] && Red < BoardSize[5][1])
      
  else if (Red == BoardSize[5][0])
      do {
           cout << "It's O turn\n";
           Red++
      } while (Red < BoardSize[5][6] && Red < BoardSize[5][5] && Red < BoardSize[5][4] && Red < BoardSize[5][3] && Red < BoardSize[5][2] && Red < BoardSize[5][1])
      
  else {
      cout << "It's O's turn\n";
  }    
  
  if (Red == BoardSize[0][6])
      do {
            cout << "It's O's turn\n"
            BoardSize[5][1];
      }
}
*/

}

int Board(string BoardSize[][], int Column[], int Row[])
{
  
  BoardSize[Row][Column];
  
  
  string BoardSize[6][7] = {   {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                               {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                               {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                               {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                               {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"},
                               {"|_|","|_|","|_|","|_|","|_|","|_|","|_|"}  };
  
  int Column[];
  int Row[];
  
  return string;

}

char WinLoseDraw(char &Red, char &Blue)
{
  char Red;
  char Blue;
  
  char Red = 'win'; 
  char Red = 'lose';
  char Red = 'draw';
  char Blue = 'win';
  char Blue = 'lose';
  char Blue = 'draw';
  
  switch (Red) {
    case 'win' :
        cout << "You Won!" << endl;
    case 'lose' :
        cout << "Try again" << endl;
    case 'draw' :
        cout << "Stalemate" << endl;
        
   switch (Blue) {
     case 'win' :
         cout << "You Won!" << endl;
     case 'lose' :
         cout << "Try again" << endl;
     case 'draw' :
         cout << "Stalemate" << endl;
   }
   
   return string;
}

int main()
{
  const char checkers = { 'O', 'X'};
  int values = 2;
  int positions = 42;
  
  ConnectHorizontal(a, b);
  ConnectVertical(a, b);
  ConnectDiagonal(a, b);
  
  return 0;
}
